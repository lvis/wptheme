<?php
/**
 * Created by IntelliJ IDEA.
 * User: lvis
 * Date: 5/17/18
 * Time: 10:55 AM
 */

namespace wp;


class WidgetMap extends Widget
{
    const MAP_LOCATIONS = "widgetMapLocations";
    const MAP_LOCATION_SITE = "widgetMapLocationSite";
    const MAP_LOCATION_POST = "widgetMapLocationPost";
    const MAP_LOCATION_PROPERTIES = "widgetMapLocationProperties";

    const MAP_ZOOM = "widgetMapZoom";
    const MAP_ZOOM_DEFAULT = 14;

    function __construct() {
        parent::__construct( __( 'Map' ) );
    }

    function enqueueScriptsTheme()
    {
        /**
         * This function update google maps Url arguments and return result.
         * @param $url string
         * @return string
         */
        $mapArgs = [];
        $mapArgs['language'] = urlencode(get_locale());
        $apiKey = get_option(SettingsSite::GOOGLE_MAP_API);
        if (!empty($apiKey)) {
            $mapArgs['key'] = urlencode($apiKey);
        }
        $mapUrl = add_query_arg($mapArgs, "//maps.google.com/maps/api/js");
        $mapUrl = esc_url_raw($mapUrl);
        wp_enqueue_script('gmap', $mapUrl, [], null, true);
        wp_enqueue_script('gmap-infobox', $this->uriToNodeModules . 'google-maps-infobox-window/infobox.js', ['gmap'], null, true);
        wp_enqueue_script('gmap-marker-clusterer', $this->uriToNodeModules . 'google-marker-clusterer-plus/src/markerclusterer_packed.js', ['gmap'], null, true);
        wp_enqueue_script('propertiesmap', $this->uriToLibs . 'propertiesmap.js', [
            'gmap',
            'gmap-infobox',
            'gmap-marker-clusterer',
        ], null, true);
        parent::enqueueScriptsTheme();
    }

    function initFields() {
        $this->addField( new WidgetField( WidgetField::RADIO, self::MAP_LOCATIONS,
            __( "Show Locations From", WpApp::TEXT_DOMAIN ), [
                self::MAP_LOCATION_SITE       => __( "Site Location", WpApp::TEXT_DOMAIN ),
                self::MAP_LOCATION_POST       => __( "Post Location", WpApp::TEXT_DOMAIN ),
                self::MAP_LOCATION_PROPERTIES => __( "Properties", WpApp::TEXT_DOMAIN ),
            ], self::MAP_LOCATION_SITE ) );
        $this->addField( new WidgetField( WidgetField::NUMBER, self::MAP_ZOOM, __( "Map Zoom", WpApp::TEXT_DOMAIN ),
            [], self::MAP_ZOOM_DEFAULT ) );
        parent::initFields(); // TODO: Change the autogenerated stub
    }

    function getMapForProperties() {
        $result          = "";
        $queryArguments  = [
            QueryPost::TYPE       => POST_PROPERTY,
            QueryPost::PER_PAGE   => - 1,
            QueryPost::META_QUERY => [
                [
                    QueryMeta::KEY     => MetaProperty::ADDRESS,
                    QueryMeta::COMPARE => QueryOperators::EXISTS,
                ],
            ],
        ];
        $queryArguments  = apply_filters( 'filterProperties', $queryArguments );
        $propertiesOnMap = new WP_Query( $queryArguments );
        if ( $propertiesOnMap->have_posts() ) {
            $content = [];
            while ( $propertiesOnMap->have_posts() ) {
                $propertiesOnMap->the_post();
                $mapData = $this->getPropertyMapData();
                if ( empty( $mapData ) == false ) {
                    $content[] = $mapData;
                }
            }
            wp_reset_query();
            if ( empty( $content ) == false ) {
                $jsonContent = json_encode( $content );
                $clusterIcon = get_template_directory_uri() . '/images/map/cluster-icon.png';
                $result      = "<div id='listing-map'></div>
				          <script type='text/javascript'>
				           jQuery(document).ready(function (){ initMapForProperties($jsonContent, '$clusterIcon');});</script>";
            }
        }

        return $result;
    }

    function getMapForProperty() {
        $result = "";
        if ( is_singular( POST_PROPERTY ) ) {
            $content = $this->getPropertyMapData();
            if ( empty( $content ) == false ) {
                $jsonContent = json_encode( $content );
                $result      = "<div id='listing-map'></div>
				          <script type='text/javascript'>
				           jQuery(document).ready(function (){ initMapForProperty($jsonContent);});</script>";
            }
        }

        return $result;
    }

    function getPropertyMapData() {
        $postId             = get_the_ID();
        $propertyMapVisible = get_post_meta( $postId, MetaProperty::SHOW_MAP, true );
        $propertyLocation   = get_post_meta( $postId, MetaProperty::LOCATION, true );
        $mapCoordinates     = [];
        if ( empty( $propertyLocation ) == false && strlen( $propertyLocation ) > 4 ) {
            $mapCoordinates = explode( ',', $propertyLocation );
        }
        $property = [];
        if ( $propertyMapVisible && empty( $mapCoordinates ) == false ) {
            $property['lat']     = $mapCoordinates[0];
            $property['lng']     = $mapCoordinates[1];
            $property['mapZoom'] = $mapCoordinates[2];
            $property['title']   = get_the_title();
            $property['thumb']   = UtilsWp::getThumbnail();
            $markupInfoBox       = '<aside class="map-info-window"><a href="%1$s"><img src="%2$s"/>
					<h5 class="map-info-title">%3$s</h5></a><div class="map-info-arrow"></div></aside>';
            $property['content'] = sprintf( $markupInfoBox, get_permalink(), $property['thumb'], get_the_title() );
        }

        return $property;
    }

    function getContactMap( $mapZoom = self::MAP_ZOOM_DEFAULT ) {
        $coordinates = self::getCoordinates( get_option( SettingsSite::ADDRESS ) );
        $lat         = $coordinates['lat'];
        $lng         = $coordinates['lng'];

        return sprintf( '<div id="map_canvas"></div>
            				 <script>jQuery(document).ready(function (){initMapForContact("%s","%s","%s");});</script>',
            $lat, $lng, $mapZoom );
    }

    static function getCoordinates( $address ) {
        $address  = str_replace( " ", "+", $address ); // replace all the white space with "+" sign to match with google search pattern
        $url      = "http://maps.google.com/maps/api/geocode/json?sensor=false&address=$address";
        $response = file_get_contents( $url );
        $json     = json_decode( $response, true ); //generate array object from the response from the web
        $result   = [ "lat" => "", "lng" => "" ];
        if ( $json && isset( $json['results'] ) && isset( $json['results'][0] ) && isset( $json['results'][0]['geometry'] ) ) {
            $result = $json['results'][0]['geometry']['location'];
        }

        return $result;
    }

    function is_connected() {
        $connected = fopen( "http://www.google.com:80/", "r" );
        if ( $connected ) {
            fclose( $connected );

            return true;
        }

        return false;

    }

    function widget( $args, $instance ) {
        $content      = "";
        $mapZoomLevel = self::getInstanceValue( $instance, self::MAP_ZOOM, $this );
        $mapLocation  = self::getInstanceValue( $instance, self::MAP_LOCATIONS, $this );
        switch ( $mapLocation ) {
            case self::MAP_LOCATION_PROPERTIES:
                $content = $this->getMapForProperties();
                break;
            case self::MAP_LOCATION_POST:
                if ( is_singular( POST_PROPERTY ) ) {
                    $content = $this->getMapForProperty();
                }
                break;
            case self::MAP_LOCATION_SITE:
            default:
                $content = $this->getContactMap( $mapZoomLevel );
                break;
        }
        $this->hideTitleForEmptyContent( $instance, $content );
        $args[ WPSidebar::CONTENT ] = $content;
        parent::widget( $args, $instance );
    }
}